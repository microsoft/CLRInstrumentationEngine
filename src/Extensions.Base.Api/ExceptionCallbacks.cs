


// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//==============================================
//This file is autogenerated
//==============================================

namespace Microsoft.Diagnostics.Instrumentation.Extensions.Base
{
    using System;
    using System.Collections.Generic;
    /// <summary>
    /// This type if generic to avoid problems merging it to mscorlib
    /// </summary>
    /// <typeparam name="T">This generic attribute has no purpose</typeparam>

    internal class ExCB<T>
    {
            internal static Dictionary<int, Action<object, Exception>>
                callbacks0 = new Dictionary<int, Action<object, Exception>>();
            internal static Dictionary<int, Action<object, Exception, object>>
                callbacks1 = new Dictionary<int, Action<object, Exception, object>>();
            internal static Dictionary<int, Action<object, Exception, object, object>>
                callbacks2 = new Dictionary<int, Action<object, Exception, object, object>>();
            internal static Dictionary<int, Action<object, Exception, object, object, object>>
                callbacks3 = new Dictionary<int, Action<object, Exception, object, object, object>>();
            internal static Dictionary<int, Action<object, Exception, object, object, object, object>>
                callbacks4 = new Dictionary<int, Action<object, Exception, object, object, object, object>>();
            internal static Dictionary<int, Action<object, Exception, object, object, object, object, object>>
                callbacks5 = new Dictionary<int, Action<object, Exception, object, object, object, object, object>>();
            internal static Dictionary<int, Action<object, Exception, object, object, object, object, object, object>>
                callbacks6 = new Dictionary<int, Action<object, Exception, object, object, object, object, object, object>>();
    }

}

//Underscore _System assembly will be treated as regular System namespace by ImportModule function of Intstrumentation Engine.
//This is done to avoid conflicts during compilation
namespace _System.Diagnostics
{
    using Microsoft.Diagnostics.Instrumentation.Extensions.Base;
    using System;

    /// <summary>
    /// This class defines public contract to register new callbacks
    /// </summary>
    [AttributeUsage(AttributeTargets.All)]
    public partial class DebuggerHiddenAttribute : Attribute
    {

        public static void ApplicationInsights_OnException(int methodId, object context, object exception)
        {
            Action<object, Exception> act = null;
            if (ExCB<int>.callbacks0.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0)
        {
            Action<object, Exception, object> act = null;
            if (ExCB<int>.callbacks1.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0, object arg1)
        {
            Action<object, Exception, object, object> act = null;
            if (ExCB<int>.callbacks2.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0, arg1);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0, object arg1, object arg2)
        {
            Action<object, Exception, object, object, object> act = null;
            if (ExCB<int>.callbacks3.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0, arg1, arg2);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0, object arg1, object arg2, object arg3)
        {
            Action<object, Exception, object, object, object, object> act = null;
            if (ExCB<int>.callbacks4.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0, arg1, arg2, arg3);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0, object arg1, object arg2, object arg3, object arg4)
        {
            Action<object, Exception, object, object, object, object, object> act = null;
            if (ExCB<int>.callbacks5.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0, arg1, arg2, arg3, arg4);
        }
        public static void ApplicationInsights_OnException(int methodId, object context, object exception, object arg0, object arg1, object arg2, object arg3, object arg4, object arg5)
        {
            Action<object, Exception, object, object, object, object, object, object> act = null;
            if (ExCB<int>.callbacks6.TryGetValue(methodId, out act) && (act != null)) act(context, exception as Exception, arg0, arg1, arg2, arg3, arg4, arg5);
        }
    }
}

