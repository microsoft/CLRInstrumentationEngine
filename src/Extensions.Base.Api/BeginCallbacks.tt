<!-- Copyright (c) Microsoft Corporation. All rights reserved.
      -->

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#
    var maxargs = 7;
    var argsComma = new Dictionary<int, string>();
    var argsDef = new Dictionary<int, string>();
    var argsDefWithName = new Dictionary<int, string>();
    var args = new Dictionary<int, string>();
    for (var arg = 0; arg < maxargs; arg++)  {

        var argsCommaStr = string.Empty;
        var argDefStr = string.Empty;
        var argsDefWithNameStr = string.Empty;
        var argsStr = string.Empty;

        if (arg > 0)
        {
            argsCommaStr = ", ";
            argDefStr = "object";
            argsDefWithNameStr = "object arg0";
            argsStr = "arg0";
        }
        for (var i = 1; i < arg; i++)  {
            argDefStr += ", object";
            argsDefWithNameStr += ", object arg" + i;
            argsStr += ", arg" + i;
        }
        argsDef.Add(arg, argDefStr);
        argsDefWithName.Add(arg, argsDefWithNameStr);
        args.Add(arg, argsStr);
        argsComma.Add(arg, argsCommaStr);
    }
#>

// Copyright (c) Microsoft Corporation. All rights reserved.
//

//==============================================
//This file is autogenerated
//==============================================

namespace Microsoft.Diagnostics.Instrumentation.Extensions.Base
{
    using System;
    using System.Collections.Generic;
    /// <summary>
    /// This type if generic to avoid problems merging it to mscorlib
    /// </summary>
    /// <typeparam name="T">This generic attribute has no purpose</typeparam>

    internal class BCB<T>
    {
<#
    for (var arg = 0; arg < maxargs; arg++)  {
#>
            public static int Lock<#=arg#>;
<#
}
#>

<#
    for (var arg = 0; arg < maxargs; arg++)  {
#>
            internal static Dictionary<int, Func<object<#=argsComma[arg]#><#=argsDef[arg]#>>>
                callbacks<#=arg#> = new Dictionary<int, Func<object<#=argsComma[arg]#><#=argsDef[arg]#>>>();
<#
    }
#>
    }

}

//Underscore _System assembly will be treated as regular System namespace by ImportModule function of Intstrumentation Engine.
//This is done to avoid conflicts during compilation
namespace _System.Diagnostics
{
    using Microsoft.Diagnostics.Instrumentation.Extensions.Base;
    using System;

    /// <summary>
    /// This class defines public contract to register new callbacks
    /// </summary>
    public partial class DebuggerHiddenAttribute : Attribute
    {

<#
    for (var arg = 0; arg < maxargs; arg++)  {
#>
        public static object ApplicationInsights_OnBegin(int methodId<#=argsComma[arg]#><#=argsDefWithName[arg]#>)
        {
            Func<object<#=argsComma[arg]#><#=argsDef[arg]#>> func = null;
            if (BCB<int>.callbacks<#=arg#>.TryGetValue(methodId, out func) && (func != null))
                return func(<#=args[arg]#>);
            else
                return null;
        }
<#
}
#>
    }
}

