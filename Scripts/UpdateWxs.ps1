<#
.Synopsis
    Generates the .wxs files
.DESCRIPTION
    This script should only run when the semanticVersion is updated in build\Version.props file.
    This script assumes the corresponding guids.[VERSION].json file is generated by UpdateGuids.ps1

    This script will read in template files for the installer and module wxs, populate it with
    string tokens (including those from guids.[VERSION].json), and write out the files.

    This generates 32 & 64 bit versions of the installer & module wxs files (4 files total).
#>
param(
    [Parameter(Mandatory = $false)]
    [switch] $StageChanges,

    [Parameter(Mandatory = $false)]
    [switch] $ForceUpdate
)

$ErrorActionPreference = 'Stop'
$VerbosePreference = 'Continue'

Import-Module "$PsScriptRoot\Common.psm1" -Force -Verbose:$false

$paths                  = Get-RepositoryPaths
$versionPropsFilePath   = "$($paths.BuildFolder)\Version.Props"
$version                = Get-ReleaseVersion -VersionPropsPath $versionPropsFilePath
$versionFile            = "$($paths.EngineInstallerFolder)\version.txt"

# Check if wxs files are up-to-date
[Version] $wxsVersion = Get-Content $versionFile
if ($wxsVersion -ge $version -and !$ForceUpdate)
{
    Write-Verbose "The .wxs files are up-to-date with version $wxsVersion. Exiting."
    return
}

$guidFilePath       = "$($paths.GuidsFolder)\guids.$version.json"
$guidDictionary     = (Get-Content $guidFilePath) | ConvertFrom-Json

$wxsDirectoryStubFilePath       = "$($paths.TemplatesFolder)\wxsDirectoryStub.xml"

$wxsInstallerTemplateFilePath   = "$($paths.TemplatesFolder)\wxsInstallerTemplate.xml"
$wxs32BitInstallerFilePath      = "$($paths.EngineInstallerFolder)\Package_x86\InstrumentationEngine.Installer_x86.wxs"
$wxs64BitInstallerFilePath      = "$($paths.EngineInstallerFolder)\Package_x64\InstrumentationEngine.Installer_x64.wxs"

$wxsModuleTemplateFilePath      = "$($paths.TemplatesFolder)\wxsModuleTemplate.xml"
$wxs32BitModuleFilePath         = "$($paths.EngineInstallerFolder)\Module_x86\InstrumentationEngine.Module_x86.wxs"
$wxs64BitModuleFilePath         = "$($paths.EngineInstallerFolder)\Module_x64\InstrumentationEngine.Module_x64.wxs"

$wxs32BitInstallerFile          = New-Item -Path $wxs32BitInstallerFilePath -ItemType File -Force
$wxs64BitInstallerFile          = New-Item -Path $wxs64BitInstallerFilePath -ItemType File -Force
$wxs32BitModuleFile             = New-Item -Path $wxs32BitModuleFilePath -ItemType File -Force
$wxs64BitModuleFile             = New-Item -Path $wxs64BitModuleFilePath -ItemType File -Force

Write-Verbose "Parsing Directory Stub template..."
$directoryStub = ''
Get-Content $wxsDirectoryStubFilePath |
    Foreach-Object {
        $line = $_.Replace('[VERSION]', $version)
        $index = $line.Indexof('Guid=')
        if ($index -ge 0)
        {
            $key = $line.SubString($index + 5).Trim("'")
            $line = $line.Replace($key, $guidDictionary.Components.$key)
        }

        $directoryStub += "$line`r`n"
    }

[xml] $directoryStub64bitXml = $directoryStub
[xml] $directoryStub32bitXml = $directoryStub

$node = $directoryStub32bitXml.Directory.SelectSingleNode('Directory[@Id = "ProgramFiles64Folder"]')
$directoryStub32bitXml.Directory.RemoveChild($node) | Out-Null

$tokenDictionary32Bit =
@{
    '[VERSION]'         = $version
    '[ARCHITECTURE]'    = 'x86'
    '[BITNESS]'         = '32'
    '[PRODUCTID]'       = $guidDictionary.x86MSI.PRODUCTID
    '[UPGRADECODE]'     = $guidDictionary.x86MSI.UpgradeCode
    '[PACKAGEID]'       = $guidDictionary.x86MSM.PackageID
}

$tokenDictionary64Bit =
@{
    '[VERSION]'         = $version
    '[ARCHITECTURE]'    = 'x64'
    '[BITNESS]'         = '64'
    '[PRODUCTID]'       = $guidDictionary.x64MSI.PRODUCTID
    '[UPGRADECODE]'     = $guidDictionary.x64MSI.UpgradeCode
    '[PACKAGEID]'       = $guidDictionary.x64MSM.PackageID
}

Write-Verbose "Parsing Installer templates..."
Get-Content $wxsInstallerTemplateFilePath |
    Foreach-Object {
        if ($_.Contains('<DirectoryStub />'))
        {
            $directoryStub32bitXml | Format-XML | Out-File $wxs32BitInstallerFile -Append -Encoding utf8
            $directoryStub64bitXml | Format-XML | Out-File $wxs64BitInstallerFile -Append -Encoding utf8
        }
        elseif ($_.Contains('<ComponentRefStub />'))
        {
            $guidDictionary.Components |
                Get-Member -MemberType NoteProperty |
                Foreach-Object { "<ComponentRef Id='$($_.Name)' />" } |
                Foreach-Object {
                    if (!$_.Contains("64.$version"))
                    {
                        $_ | Out-File $wxs32BitInstallerFile -Append -Encoding utf8
                    }
                    $_ | Out-File $wxs64BitInstallerFile -Append -Encoding utf8
                }
        }
        else
        {
            Set-StringTokens -InputString $_ -TokenDictionary $tokenDictionary32Bit | Out-File $wxs32BitInstallerFile -Append -Encoding utf8
            Set-StringTokens -InputString $_ -TokenDictionary $tokenDictionary64Bit | Out-File $wxs64BitInstallerFile -Append -Encoding utf8
        }
    }

Write-Verbose "Parsing Module templates..."
Get-Content $wxsModuleTemplateFilePath |
    Foreach-Object {
        if ($_.Contains('<DirectoryStub />'))
        {
            $directoryStub32bitXml.OuterXml | Format-XML | Out-File $wxs32BitModuleFile -Append -Encoding utf8
            $directoryStub64bitXml.OuterXml | Format-XML | Out-File $wxs64BitModuleFile -Append -Encoding utf8
        }
        else
        {
            Set-StringTokens -InputString $_ -TokenDictionary $tokenDictionary32Bit | Out-File $wxs32BitModuleFile -Append -Encoding utf8
            Set-StringTokens -InputString $_ -TokenDictionary $tokenDictionary64Bit | Out-File $wxs64BitModuleFile -Append -Encoding utf8
        }
    }

if ($StageChanges)
{
    $version | Out-File $versionFile -Force -Encoding utf8
    Add-FileToCommit $wxs32BitInstallerFilePath
    Add-FileToCommit $wxs64BitInstallerFilePath
    Add-FileToCommit $wxs32BitModuleFilePath
    Add-FileToCommit $wxs64BitModuleFilePath
    Add-FileToCommit $versionFile
}